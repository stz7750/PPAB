<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="store.stz7750.stz.admin.mapper.AdminMapper">
    <sql id="selectNews">
        SELECT
            *
        FROM
            event
    </sql>

    <sql id="addr">
        SELECT
        <choose>
            <when test="'addr' == dynamicType">
                gid,
                CONCAT(a4, ' ', a5) AS addr
            </when>
            <otherwise>
                ST_X(ST_Centroid(ST_Transform(geom, 4326))) AS longitude,
                ST_Y(ST_Centroid(ST_Transform(geom, 4326))) AS latitude
            </otherwise>
        </choose>
        FROM GISBUILDSEOUL t1
    </sql>


    <insert id="upsertEvent" parameterType="store.stz7750.stz.admin.vo.EventVO">
        INSERT INTO
            event
            (
                event_id,
                title,
                content,
                reg_dt,
                editor,
                images,
                bngn_dt,
                end_dt,
                type
            )
            VALUES
            (
                (select max(event_id)+1 from event),
                #{title},
                #{content},
                now(),
                #{editor},
                #{images},
                #{bngnDt},
                #{endDt},
                #{type}
            )
            ON CONFLICT (event_id) DO UPDATE
            SET
            title = EXCLUDED.title,
            content = EXCLUDED.content,
            editor = EXCLUDED.editor,
        <if test="modifiDt != null and  modifi != ''">
            modifiDt = EXCLUDED.modifi_dt,
        </if>
            images = EXCLUDED.images,
            bngn_dt = EXCLUDED.bngn_dt,
            end_dt = EXCLUDED.end_dt,
            type = EXCLUDED.type
    </insert>

    <select id="selectNews" resultType="store.stz7750.stz.admin.vo.EventVO">
        <include refid="selectNews" />
        <where>
            <choose>
            <when test="eventId != null and eventId != ''">
               AND event_id = #{eventId}
            </when>
            <when test="editor != null and editor != ''">
                AND editor = #{editor}
            </when>
            </choose>
        </where>
    </select>

<!--    <select id="selectLoginCountByType" parameterType="map" resultType="map">
        <choose>
            &lt;!&ndash; 일별 데이터 조회 &ndash;&gt;
            <when test="type == 'daily'">
                WITH date_series AS (
                SELECT TO_CHAR(CURRENT_DATE - INTERVAL '1 day' * generate_series(0, 6), 'YYYYMMDD') AS date
                )
            </when>

            &lt;!&ndash; 월별 데이터 조회 &ndash;&gt;
            <when test="type == 'monthly'">
                WITH date_series AS (
                SELECT TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 month' * generate_series(0, 11), 'YYYYMM') AS month
                )
            </when>

            &lt;!&ndash; 연도별 데이터 조회 &ndash;&gt;
            <when test="type == 'yearly'">
                WITH date_series AS (
                SELECT TO_CHAR(DATE_TRUNC('YEAR', CURRENT_DATE) - INTERVAL '1 year' * generate_series(0, 4), 'YYYY') AS year
                )
            </when>
        </choose>
        SELECT
        date_series.date,
        COALESCE(COUNT(l.id), 0) AS login_count
        FROM
        date_series
        LEFT JOIN
        login_logs l ON date_series.date = TO_CHAR(l.current_login_time, 'YYYYMMDD')
        GROUP BY
        date_series.date
        ORDER BY
        date_series.date DESC
    </select>-->

    <select id="selectLoginCountByType" parameterType="map" resultType="map">
        <choose>
            <!-- 일별 데이터 조회 -->
            <when test="type == 'daily'">
                WITH date_series AS (
                    SELECT TO_CHAR(CURRENT_DATE - INTERVAL '1 day' * generate_series(0, 6), 'YYYY-MM-DD') AS date
                )
                SELECT
                    ds.date,
                    COALESCE(COUNT(l.id), 0) AS login_count
                FROM
                    date_series ds
                LEFT JOIN
                    login_logs l ON ds.date = TO_CHAR(l.current_login_time, 'YYYY-MM-DD')
                GROUP BY
                    ds.date
                ORDER BY
                    ds.date DESC
            </when>

            <!-- 월별 데이터 조회 -->
            <when test="type == 'monthly'">
                WITH month_series AS (
                    SELECT TO_CHAR(DATE_TRUNC('MONTH', CURRENT_DATE) - INTERVAL '1 month' * generate_series(0, 11), 'YYYY-MM') AS date
                )
                SELECT
                    ms.date,
                    COALESCE(COUNT(l.id), 0) AS login_count
                FROM
                    month_series ms
                LEFT JOIN
                    login_logs l ON ms.date = TO_CHAR(DATE_TRUNC('MONTH', l.current_login_time), 'YYYY-MM')
                GROUP BY
                    ms.date
                ORDER BY
                    ms.date DESC
            </when>

            <!-- 연도별 데이터 조회 -->
            <when test="type == 'yearly'">
                WITH year_series AS (
                    SELECT TO_CHAR(DATE_TRUNC('YEAR', CURRENT_DATE) - INTERVAL '1 year' * generate_series(0, 4), 'YYYY') AS date
                )
                SELECT
                    ys.date,
                    COALESCE(COUNT(l.id), 0) AS login_count
                FROM
                    year_series ys
                LEFT JOIN
                    login_logs l ON ys.date = TO_CHAR(DATE_TRUNC('YEAR', l.current_login_time), 'YYYY')
                GROUP BY
                    ys.date
                ORDER BY
                    ys.date DESC
            </when>
        </choose>
    </select>


    <update id="upsertMenu">
        WITH menu_upsert AS (
            UPDATE
                menu_info
            SET
                menu_id,
                menu_name,
                parent_menu_id,
                menu_seq,
                menu_path
            RETURNING *
        )
        INSERT INTO
            menu_info
            (
                menu_id,
                menu_name,
                parent_menu_id,
                menu_seq,
                menu_path
            )
        VALUES
            (
                #{menu_id}
            )
    </update>

    <select id="getAddr" resultType="map" parameterType="map">
        <include refid="addr"></include>
        <where>
            <if test="sigKorNm != null and sigKorNm != ''">
                a4 LIKE '%' || #{sigKorNm} || '%'
            </if>
            <if test="bunji != null and bunji != ''">
                AND a5 LIKE '%' || #{bunji}
            </if>
        </where>
    </select>

    <select id="getAllAddrNm" parameterType="map">
        <include refid="addr">
            <property name="dynamicType" value="addr"/>
        </include>
        <where>
            <if test="startSigKorNm != null and startSigKorNm != ''">
                a4 LIKE '%' || #{startSigKorNm} || '%'
                <if test="startBunji != null and startBunji != ''">
                    AND a5 = #{startBunji}
                </if>
            </if>

            <if test="endSigKorNm != null and endSigKorNm != ''">
                OR a4 LIKE '%' || #{endSigKorNm} || '%'
                <if test="endBunji != null and endBunji != ''">
                    AND a5 =#{endBunji}
                </if>
            </if>
        </where>
    </select>

    <insert id="insertCntntSummaryStats">
        INSERT INTO cntnt_summary_stats
            (
                yr,
                dt,
                ttl_logins,
                ttl_events,
                ttl_users,
                reg_dt,
                reg_by
            )
        VALUES
            (
                TO_CHAR(NOW(), 'YYYY'),
                CURRENT_DATE,
                (SELECT COUNT(1) FROM login_logs),
                (SELECT COUNT(1) FROM event ),
                (SELECT COUNT(1) FROM userInfo),
                NOW(),
                COALESCE(#{regBy}, 'admin')
            )
    </insert>

    <insert id="insertBatchHistory">
        INSERT INTO
            batch_hist
                (
                    job_name,
                    start_time,
                    end_time,
                    duration_seconds,
                    status,
                    error_message
                )
        VALUES
            (
                #{jobName},
                #{startTime},
                #{endTime},
                #{durationSeconds},
                #{status},
                #{errorMessage}
            );
    </insert>


</mapper>